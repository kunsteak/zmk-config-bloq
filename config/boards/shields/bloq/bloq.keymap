#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <2000>;
    quick-release;
};
&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>;
};

/* Layers */
#define DEF 0
#define SYM 1
#define NAV 2	
#define BLT 3
/ { 
    combos {
        compatible = "zmk,combos";
        combo_caps {
            timeout-ms = <100>;
            key-positions = <7 8 9>;
            bindings = <&caps_word>;
        };
        combo_repeat  {
            timeout-ms = <100>;
            key-positions = <18 28>;
            bindings = <&key_repeat>;
            layers = <DEF>;
        };
        combo_colon  {
            timeout-ms = <100>;
            key-positions = <28 29>;
            bindings = <&kp COLON>;
            layers = <DEF>;
        };
        combo_semi  {
            timeout-ms = <100>;
            key-positions = <8 9>;
            bindings = <&kp SEMI>;
            layers = <DEF>;
        };
    };

    behaviors {
        m_l: mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>; // right hand
        };
        m_r: mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>; // left hand
        };
        l_l: layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>; // right hand
        };
        l_r: layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>; // left hand
        };
        shftrep: shft_rep {
             compatible = "zmk,behavior-hold-tap";
             label = "SHFT_REP";
             #binding-cells = <2>;
             flavor = "hold-preferred";
             tapping-term-ms = <300>;
             quick-tap-ms = <250>;
             bindings = <&kp>, <&key_repeat>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    //      00  01  02  03  04      05  06  07  08  09
    //      10  11  12  13  14      15  16  17  18  19
    //      20  21  22  23  24      25  26  27  28  29
    //              30  31  32      33  34  35

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
            &kp Y     &m_l LCTL C   &m_l LALT L   &m_l LGUI M   &kp K         &kp Z   &m_r RGUI F   &m_r RALT U      &m_r RCTL COMMA   &td DQT SQT
            &kp I     &l_l BLT S    &l_l SYM R    &l_l NAV T    &kp G         &kp P   &l_r NAV N    &l_r SYM E       &l_r BLT A        &kp O
            &kp Q     &kp V         &kp W         &kp D         &kp J         &kp B   &kp H         &td QMARK FSLH   &kp DOT           &kp X
            &kp TAB   &mt LC(LS(LALT)) SPC   &kp ESC                          &kp RET   &kp BSPC   &sk RSHFT
            >;
        };

        sym {
            bindings = <
            &kp ESC     &kp LT      &kp GT      &kp LPAR   &kp RPAR         &kp PLUS    &kp N1   &kp N2   &kp N3   &td SEMI COLON
            &kp TILDE   &kp UNDER   &kp MINUS   &kp LBKT   &kp RBKT         &kp MINUS   &kp N4   &kp N5   &kp N6   &kp EQUAL
            &kp GRAVE   &kp PIPE    &kp BSLH    &kp LBRC   &kp RBRC         &kp FSLH    &kp N7   &kp N8   &kp N9   &kp N0
            &kp TAB   &mt LC(LS(LALT)) SPC   &kp ESC                        &m_r RCTL RET   &m_r RGUI BSPC   &sk RSHFT
            >;
        };

        nav {
            bindings = <
            &kp LSHFT   &kp LGUI       &kp LALT       &none   &none         &kp DEL            &kp HOME         &kp UP             &kp END     &kp PG_UP
            &kp LNLCK   &kp LG(LBRC)   &kp RG(RBRC)   &none   &none         &td K_CUT K_COPY   &kp LEFT         &kp DOWN           &kp RIGHT   &kp PG_DN
            &kp LCTL    &kp LG(LBKT)   &kp LG(RBKT)   &none   &none         &kp K_PASTE        &kp RC(RA(UP))   &kp RC(RA(DOWN))   &kp COMMA   &kp SEMI
            &trans   &trans   &trans                                        &trans   &trans   &trans
            >;
        };

        blt {
            bindings = <
            &none    &none   &none   &none         &none         &none   &none         &none   &none   &none
            &none    &none   &none   &bootloader   &none         &none   &bootloader   &none   &none   &none
            &reset   &none   &none   &none         &none         &none   &none         &none   &none   &reset
            &none   &none   &none                                &none   &none   &none
            >;
        };

    };
};
